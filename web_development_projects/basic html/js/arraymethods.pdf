JS





Var x=10
x=12
x = “hello”

Let

Const y=10
y=11


Flow control


Arrow Functions

add (x,y,z=10){

return x+y+z;
}


let add = (x,y,z=10) => {

return x+y+z;
}


let add = (x,y,z=10) => x+y+z; 

// let add = (x,y,z=10) => { let p=5; return x+y+z; }

add(2,3,4);


let sqr = x => x**2;



let x1=10;

function f1( z ){

let x2=20;

console.log( x2  )  ; ?? // 20

for ( i = 0; i<1 ; i++ ){
console.log( x2  )  ; ?? // 20 
let x3 = 5;
console.log( x3  )  ; ?? // 5
};

console.log( x3  )  ; ?? undefined

console.log( x2  )  ; ?? // 20 


}


console.log( x2  )  ; ?? // undefined
console.log( x1  )  ; ?? // 10 


ARRAY METHODS

Method
Description
Example
Output


push()
Adds one or more elements to the end of an array.
const arr = [1, 2]; arr.push(3);
[1, 2, 3]



pop()
Removes the last element from an array.
const arr = [1, 2, 3]; arr.pop();
[1, 2]



shift()
Removes the first element from an array.
const arr = [1, 2, 3]; arr.shift();
[2, 3]



unshift()
Adds one or more elements to the beginning of an array.
const arr = [1, 2]; arr.unshift(0);
[0, 1, 2]



slice()
Returns a shallow copy of a portion of an array.
const arr = [1, 2, 3, 4]; arr.slice(1, 3);
[2, 3]



splice()
Adds/removes elements from an array at a specified position.
const arr = [1, 2, 3]; arr.splice(1, 1, 9);
[1, 9, 3]



sort()
Sorts the elements of an array in place.
const arr = [3, 1, 2]; arr.sort();
[1, 2, 3]



reverse()
Reverses the order of the elements in an array.
const arr = [1, 2, 3]; arr.reverse();
[3, 2, 1]



concat()
Merges two or more arrays.
const arr1 = [1, 2]; const arr2 = [3, 4]; arr1.concat(arr2);
[1, 2, 3, 4]



join()
Joins all elements of an array into a string.
const arr = [1, 2, 3]; arr.join('-');
"1-2-3"



indexOf()
Returns the first index of an element, or -1 if not found.
const arr = [1, 2, 3]; arr.indexOf(2);
1



find()
Returns the first element that satisfies a condition.
const arr = [1, 2, 3]; arr.find(x => x > 1);
2



findIndex()
Returns the index of the first element that satisfies a condition.
const arr = [1, 2, 3]; arr.findIndex(x => x > 1);
1



filter()
Creates a new array with elements that satisfy a condition.
const arr = [1, 2, 3]; arr.filter(x => x > 1);
[2, 3]



map()
Creates a new array with the results of calling a function on every element.
const arr = [1, 2, 3]; arr.map(x => x * 2);
[2, 4, 6]



reduce()
Applies a function against an accumulator and each element.
const arr = [1, 2, 3]; arr.reduce((sum, x) => sum + x, 0);
6



some()
Tests whether at least one element passes a condition.
const arr = [1, 2, 3]; arr.some(x => x > 2);
true



every()
Tests whether all elements pass a condition.
const arr = [1, 2, 3]; arr.every(x => x > 0);
true



includes()
Checks if an array contains a certain element.
const arr = [1, 2, 3]; arr.includes(2);
true



flat()
Flattens a nested array into a single array.
const arr = [1, [2, [3]]]; arr.flat(2);
[1, 2, 3]



forEach()
Executes a function on each element.
const arr = [1, 2, 3]; arr.forEach(x => console.log(x));
Logs 1, 2, 3



at()
Returns the element at a given index (negative indices are allowed).
const arr = [1, 2, 3]; arr.at(-1);
3



fill()
Fills the array with a static value.
const arr = [1, 2, 3]; arr.fill(0);
[0, 0, 0]



reduceRight()
Applies a function against an accumulator from right to left.
const arr = [1, 2, 3]; arr.reduceRight((sum, x) => sum + x, 0);
6





CHALLENGE:
class Student { constructor(name, age, height) { this.name = name; this.age = age; this.height = height; } }
